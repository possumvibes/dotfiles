# Aesthetic or death
colorscheme 'catppuccin_mocha'

# To begin

evaluate-commands %sh{
  kak-lsp --kakoune --session "$kak_session"
}
lsp-enable

# Plugin manager: kak-bundle
source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"
bundle-noload kak-bundle https://git.sr.ht/~jdugan6240/kak-bundle

bundle auto-pairs.kak https://github.com/alexherbo2/auto-pairs.kak 
enable-auto-pairs

bundle kakoune-filetree https://github.com/occivink/kakoune-filetree

## Options ----------------------------

# UI options
set-option global tabstop 2
set-option global indentwidth 2

set-option global scrolloff 5,3
set-option global ui_options terminal_assistant=cat terminal_status_on_top=true

add-highlighter global/word-wrap wrap -word -indent
add-highlighter global/show-matching show-matching
add-highlighter global/number-lines number-lines -hlcursor -relative

# Commands ----------------------------
define-command enter_lsp_mode %{
  enter-user-mode lsp
}

# Creates a buffer from the given string.
# https://github.com/mawww/kakoune/blob/master/src/buffer_utils.cc#:~:text=create_buffer_from_string
define-command create_buffer_from_string -params 2 %{
  edit -scratch %arg{1}
  set-register dQuote %arg{2}
  execute-keys '%R'
}

alias global buffer_str create_buffer_from_string


# https://github.com/alexherbo2/dotfiles/blob/master/.config/kak/kakrc
define-command open_config %{
  edit "%val{config}/kakrc"
}

# https://github.com/alexherbo2/dotfiles/blob/master/.config/kak/kakrc
define-command pwd %{
  echo -markup "{Information}%sh{pwd}"
}

# Prompt Commands ----------------------------

define-command show_definition_preview_hover %{
  lsp-hover
}

define-command open_document_symbol_picker %{
  lsp-goto-document-symbol
}

define-command open_workspace_symbol_picker %{
  lsp-workspace-symbol-incr
}

define-command open_buffer_picker %{
  prompt open: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command open_file_picker %{
  prompt open: -menu -shell-script-candidates 'fd --type=file --hidden' %{
    edit -existing %val{text}
  }
}


# Mappings ----------------------------

# Normal mode
# remapping for my hands not to fall off
map global normal "'"     ";"                     -docstring 'reduce selections to their cursor'
map global normal "<a-'>" "<a-;>"                 -docstring 'swap cursors and anchors'

map global normal <ret>   :                       -docstring 'enter command mode'
map global normal '#'     :comment-line<ret>      -docstring 'comment line'
map global normal '<a-#>' :comment-block<ret>     -docstring 'comment block'
map global normal <esc>   ";,"                    -docstring 'clear all selections to current cursor'
map global normal ~       ':enter-user-mode -lock mirror<ret>' -docstring 'enter mirror mode'

# vim-like W, E, B behavior
map global normal W <a-w> -docstring "vim-like: WORD"
map global normal E <a-e> -docstring "vim-like: WORD End"
map global normal B <a-b> -docstring "vim-like: WORD Beginning"

# Normal mode user mode entry
map global normal m :enter_match_mode<ret>  -docstring 'enter match mode'
map global normal q :enter_extend_mode<ret> -docstring 'enter extend mode'

  # clipboard.kak: clipboard sync on explicit yank
map global normal Y y -docstring 'yank and sync to system clipboard'
## TODO: get this to respect Y so it's available from normal but not by default
hook global NormalKey y clipboard-sync

# User mode
map global insert '<c-w>' '<esc>bc' -docstring 'convenience shortcut to change previous word in insert mode'

map global match s ':enter_surround_mode<ret>' -docstring 'enter surround mode'

# user mode
map global user m ':open_document_symbol_picker<ret>' -docstring 'open document symbol picker' 
map global user M ':open_workspace_symbol_picker<ret>' -docstring 'open workspace symbol picker' 
map global user k ':show_definition_preview_hover<ret>' -docstring 'show definition preview hover' 
map global user f ':open_file_picker<ret>' -docstring 'open file picker' 
map global user b ':open_buffer_picker<ret>' -docstring 'open buffer picker' 

map global user g '<esc>:w<ret>' -docstring 'writes file; :w'  
map global user l ':enter_lsp_mode<ret>' -docstring 'enter LSP mode'
map global user s ':enter_surround_mode<ret>' -docstring 'enter surround mode'
map global user ~ ':enter_letter_case_mode<ret>' -docstring 'enter letter_case mode'
map global user <space> "<a-;>" -docstring "switch selection direction"

map global user q q -docstring "replay macro"
map global user Q Q -docstring "record/stop recording macro"

## Hooks
#
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

# tabs for autocomplete
hook global InsertCompletionShow .* %{
  map window insert <tab> <c-n>
  map window insert <s-tab> <c-p>
  hook -once window InsertCompletionHide .* %{
    unmap window insert <tab>
    unmap window insert <s-tab>
  }
}

## toggle absolute line numbers in insert mode
hook global ModeChange .*:insert %{
  add-highlighter -override window/number-lines number-lines -hlcursor
}
hook global ModeChange .*:insert:.* %{
  add-highlighter -override window/number-lines number-lines -hlcursor -relative
}

require-module fandt
